import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
import asyncio

API_TOKEN = '7886310382:AAEuAxcLpXdkfcCsTYwcCI9oWu4DsH-qosI'
CHANNEL_USERNAME = '@sofinolog'  # –∫–∞–Ω–∞–ª, –≥–¥–µ –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–∞–ª—É", url=f"https://t.me/{CHANNEL_USERNAME[1:]}"),
        InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='check_sub')
    )
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'check_sub')
async def check_subscription(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        if member.status in ['member', 'administrator', 'creator']:
            await bot.answer_callback_query(callback_query.id, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã!")
            await bot.send_message(user_id, "üéâ –û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ–π–¥–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É üëâ @SofWB_bot")
        else:
            raise Exception("Not subscribed")
    except:
        await bot.answer_callback_query(callback_query.id, "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    async def main():
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling()
    asyncio.run(main())